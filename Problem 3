//HTML
<script src="https://threejs.org/build/three.js"></script>


//Javascript
const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );
renderer.setClearColor("#e5e5e5");

const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.1, 1000 );
camera.position.set( 0, 0, 100);
camera.lookAt( 0, 0, 0 );

const scene = new THREE.Scene();


const geometry = new THREE.CylinderGeometry( 3, 5, 50, 4, true ).toNonIndexed(); //for some reason it will not allow me to create an open ended cylinder; followed directions but still doesnt work
const material = new THREE.MeshBasicMaterial({vertexColors: true});
const positionAttribute = geometry.getAttribute( 'position' );
const colors = [];
		const color = new THREE.Color();
		
	for ( let i = 0; i < positionAttribute.count; i +=3 ) 
    {
		
			color.set( Math.random() * 0xffffff ); //I couldnt figure out a way to make it the color i want it to be so i made it random
			colors.push( color.r, color.g, color.b );	
      colors.push( color.r, color.g, color.b );	
      colors.push( color.r, color.g, color.b );	
      colors.push( color.r, color.g, color.b );	
      colors.push( color.r, color.g, color.b );	
      colors.push( color.r, color.g, color.b );	
		}


geometry.setAttribute( 'color', new THREE.Float32BufferAttribute(colors, 3 ) );
const cylinder = new THREE.Mesh( geometry, material );
scene.add(cylinder);


const geometry2 = new THREE.ConeGeometry(3, 10, 4, 1, true).toNonIndexed(); //same issue with cone as open ended cylinder 
const material2 = new THREE.MeshBasicMaterial({vertexColors: true});
const positionAttribute2 = geometry2.getAttribute( 'position' );
const colors2 = [];
		const color2 = new THREE.Color();
		
		for ( let j = 0; j < positionAttribute.count; j += 3 ) 
    {
			color.set( Math.random() * 0xffffff );
			colors2.push( color.r, color.g, color.b );
			colors2.push( color.r, color.g, color.b );
			colors2.push( color.r, color.g, color.b );
		}
    
geometry2.setAttribute( 'color', new THREE.Float32BufferAttribute( colors2, 3 ) );
const cone = new THREE.Mesh( geometry2, material2 );
scene.add(cone);


cylinder.position.y -=10;
cone.position.y += 20;


const light = new THREE.PointLight(0xFFFFFF, 1, 500);
light.position.set(10, 0, 25);
scene.add(light);


const render = function() //rotates so you can see each side easier 
{
	requestAnimationFrame(render);
  renderer.render( scene, camera );
  cone.rotation.y += 0.05;
  cylinder.rotation.y += 0.05;
}

render();
